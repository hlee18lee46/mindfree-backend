import { QualifiedCoinInfo, CoinInfo } from '@midnight-ntwrk/zswap';

interface CoinRecipe {
    type: string;
    value: bigint;
}
type Imbalance = [string, bigint];
type Imbalances = Map<string, bigint>;
declare const emptyImbalances: Imbalances;
declare const createImbalances: (imbalances: [string, bigint][]) => Imbalances;
declare const mergeImbalances: (a: Imbalances, b: Imbalances) => Imbalances;

interface TransactionCostModel {
    inputFeeOverhead: bigint;
    outputFeeOverhead: bigint;
}
declare class CounterOffer {
    readonly imbalances: Imbalances;
    readonly transactionCostModel: TransactionCostModel;
    readonly feeTokenType: string;
    readonly inputsRecipe: QualifiedCoinInfo[];
    readonly outputsRecipe: CoinInfo[];
    constructor(imbalances: Imbalances, transactionCostModel: TransactionCostModel, feeTokenType: string);
    findNonNativeImbalance(): Imbalance | undefined;
    findNativeImbalance(): Imbalance | undefined;
    addInput(input: QualifiedCoinInfo): void;
    addOutput(output: CoinRecipe): void;
}

interface BalanceRecipe {
    inputs: QualifiedCoinInfo[];
    outputs: CoinInfo[];
}
declare const getBalanceRecipe: (coins: QualifiedCoinInfo[], targetImbalances: Imbalances, transactionCostModel: TransactionCostModel, feeTokenType: string) => BalanceRecipe;
declare const createCounterOffer: (coins: QualifiedCoinInfo[], targetImbalances: Imbalances, transactionCostModel: TransactionCostModel, feeTokenType: string) => CounterOffer;

export { type BalanceRecipe, type CoinRecipe, CounterOffer, type Imbalance, type Imbalances, type TransactionCostModel, createCounterOffer, createImbalances, emptyImbalances, getBalanceRecipe, mergeImbalances };
