import { HDKey } from '@scure/bip32';
type ValueOf<T> = T[keyof T];
export declare const Roles: {
    readonly NightExternal: 0;
    readonly NightInternal: 1;
    readonly Dust: 2;
    readonly Zswap: 3;
    readonly Metadata: 4;
};
export type Role = ValueOf<typeof Roles>;
type DerivationResult = {
    type: 'keyDerived';
    key: Uint8Array;
} | {
    type: 'keyOutOfBounds';
};
type HDWalletResult = {
    type: 'seedOk';
    hdWallet: HDWallet;
} | {
    type: 'seedError';
    error: unknown;
};
export declare class HDWallet {
    private readonly rootKey;
    private constructor();
    static fromSeed(seed: Uint8Array): HDWalletResult;
    selectAccount(account: number): AccountKey;
}
export declare class AccountKey {
    private rootKey;
    private account;
    constructor(rootKey: HDKey, account: number);
    selectRole(role: Role): RoleKey;
}
export declare class RoleKey {
    private rootKey;
    private account;
    private role;
    constructor(rootKey: HDKey, account: number, role: Role);
    deriveKeyAt(index: number): DerivationResult;
}
export {};
//# sourceMappingURL=HDWallet.d.ts.map